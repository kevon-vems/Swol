
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore
@using Swol.Components.Pages
@using Swol.Data.Models
@using Swol.Data.Models.Work
@using Swol.Data.Models.Template
@using Swol.Data.Models.Config
@using Swol.Enums

<PageTitle>@PageTitle</PageTitle>

<div class="max-w-4xl mx-auto p-4 space-y-6">

<div class="flex items-center justify-between mb-6">
    <h1 class="text-2xl font-bold">@PageTitle</h1>
    <button type="submit" form="WorkoutCreateForm" class="text-blue-600 hover:text-blue-800 text-2xl">
        <i class="bi bi-save"></i>
    </button>
</div>

<div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-6 rounded">
    <strong>What is a Workout?</strong><br />
    A Workout in this application is a collection of exercises performed together as a session. Each Workout can include multiple exercises, their order, sets, reps, and weights. Workouts are designed to be repeated and tracked over time, and can be used as part of a larger training plan (Workout Template).
    <br /><br />
    <strong>Example:</strong><br />
    <em>Name:</em> Push Day<br />
    <em>Description:</em> Upper body workout focused on chest, shoulders, and triceps.<br />
    <em>Exercises:</em>
    <ul class="list-disc list-inside ml-4">
        <li>Barbell Bench Press: 4 sets x 8 reps @@ 60kg</li>
        <li>Overhead Press: 3 sets x 10 reps @@ 35kg</li>
        <li>Triceps Pushdown: 3 sets x 12 reps @@ 25kg</li>
    </ul>
</div>

<EditForm Model="workout" OnValidSubmit="HandleValidSubmit" FormName="WorkoutCreateForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="mb-4 text-red-600" />
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
        <InputText class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="workout.Name" />
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
        <InputTextArea class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="workout.Description" />
    </div>
    <div class="mb-4 flex items-center gap-2">
        <InputCheckbox id="saveTemplate" @bind-Value="saveAsTemplate" />
        <label for="saveTemplate" class="text-sm font-medium text-gray-700">Save as template</label>
    </div>
    <div class="mb-3">
        <div class="flex flex-row gap-2 overflow-x-auto flex-nowrap items-start w-full max-w-screen sm:max-w-[calc(100vw-250px)]">
            @foreach (var day in workout.Days.OrderBy(d => d.DayOfWeek))
            {
                <WorkoutDayCard Day="day"
                                WorkoutDays="workout.Days"
                                EditingExercises="editingExercises"
                                SelectedMuscleGroup="selectedMuscleGroup"
                                RemoveDay="RemoveDay"
                                DayOfWeekChanged="OnDayOfWeekChanged"
                                ExerciseSelected="OnExerciseSelected"
                                MuscleGroupChanged="OnMuscleGroupChanged"
                                RemoveSelectedMuscleGroup="RemoveSelectedMuscleGroup"
                                RemoveExercise="RemoveExerciseFromDay"
                                StartEditingExercise="StartEditingExercise"
                                StopEditingExercise="StopEditingExercise"
                                GetExercisesForDay="GetExercisesForDay" />
            }
            @if (workout.Days.Count < 7)
            {
                <div class="bg-stone-50 rounded w-[250px] min-w-[250px] max-w-[250px] flex flex-col border border-1 border-gray-400 p-2">
                    <button type="button"
                            class="px-2 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition"
                            @onclick="AddDay">
                        Add Day
                    </button>
                </div>
            }
        </div>
    </div>
    <div class="flex items-center mt-6">
        @if (Id.HasValue)
        {
            <button type="button" class="text-red-600 text-xl" @onclick="DeleteWorkout">
                <i class="bi bi-trash"></i>
            </button>
        }
    </div>
</EditForm>

</div>

@code {
    [Parameter] public int? Id { get; set; }

    private Workout workout = new();
    private bool saveAsTemplate;
    private List<Exercise> allExercises = new();
    private Dictionary<DayOfWeek, MuscleGroups?> selectedMuscleGroup = new();
    private Dictionary<DayOfWeek, int> selectedExerciseId = new();
    private HashSet<(DayOfWeek, int)> editingExercises = new();
    private string PageTitle => Id.HasValue ? "Edit Workout" : "Add Workout";

    protected override async Task OnInitializedAsync()
    {
        allExercises = await Db.Exercises
            .Include(e => e.ExerciseMuscleGroups)
                .ThenInclude(emg => emg.MuscleGroup)
            .OrderBy(e => e.Name)
            .ToListAsync();

        if (Id.HasValue)
        {
            workout = await Db.Workouts
                .Include(w => w.Days)
                    .ThenInclude(d => d.Exercises)
                        .ThenInclude(e => e.Exercise)
                            .ThenInclude(ex => ex.ExerciseMuscleGroups)
                                .ThenInclude(emg => emg.MuscleGroup)
                .FirstOrDefaultAsync(w => w.Id == Id.Value) ?? new Workout();
        }
        else
        {
            workout = new Workout();
            workout.Days.Add(new WorkoutDay { DayOfWeek = DayOfWeek.Sunday });
            workout.Days.Add(new WorkoutDay { DayOfWeek = DayOfWeek.Monday });
            workout.Days.Add(new WorkoutDay { DayOfWeek = DayOfWeek.Tuesday });
            workout.Days.Add(new WorkoutDay { DayOfWeek = DayOfWeek.Wednesday });
            workout.Days.Add(new WorkoutDay { DayOfWeek = DayOfWeek.Thursday });
            workout.Days.Add(new WorkoutDay { DayOfWeek = DayOfWeek.Friday });
            workout.Days.Add(new WorkoutDay { DayOfWeek = DayOfWeek.Saturday });
        }
    }

    private void AddDay()
    {
        var available = Enum.GetValues<DayOfWeek>().Except(workout.Days.Select(d => d.DayOfWeek)).ToList();
        if (!available.Any()) return;
        var day = new WorkoutDay { DayOfWeek = available.First() };
        workout.Days.Add(day);
        StateHasChanged();
    }

    private void RemoveDay(WorkoutDay day)
    {
        workout.Days.Remove(day);
        StateHasChanged();
    }

    private void OnExerciseSelected(WorkoutDay day, object value, WorkoutDayExercise? editingEx = null)
    {
        if (int.TryParse(value?.ToString(), out var exId) && exId > 0)
        {
            if (editingEx != null)
            {
                var exercise = allExercises.FirstOrDefault(e => e.Id == exId);
                if (exercise == null) return;
                editingEx.ExerciseId = exId;
                editingEx.Exercise = exercise;
            }
            else
            {
                selectedExerciseId[day.DayOfWeek] = exId;
                AddExerciseToDay(day);
                selectedExerciseId[day.DayOfWeek] = 0;
            }
            StateHasChanged();
        }
    }

    private void AddExerciseToDay(WorkoutDay day)
    {
        if (!selectedExerciseId.TryGetValue(day.DayOfWeek, out var exId) || exId == 0) return;
        if (day.Exercises.Any(e => e.ExerciseId == exId)) return;
        var exercise = allExercises.FirstOrDefault(e => e.Id == exId);
        if (exercise == null) return;
        var ex = new WorkoutDayExercise
        {
            ExerciseId = exId,
            Exercise = exercise,
            OrderInDay = day.Exercises.Count + 1
        };
        day.Exercises.Add(ex);

        selectedMuscleGroup[day.DayOfWeek] = null;
        selectedExerciseId[day.DayOfWeek] = 0;
        StateHasChanged();
    }

    private void OnMuscleGroupChanged(DayOfWeek day, object value)
    {
        if (Enum.TryParse<MuscleGroups>(value?.ToString(), out var mg))
            selectedMuscleGroup[day] = mg;
        else
            selectedMuscleGroup[day] = null;
        selectedExerciseId[day] = 0;
    }

    private void RemoveSelectedMuscleGroup(DayOfWeek dayOfWeek)
    {
        if (selectedMuscleGroup.ContainsKey(dayOfWeek))
        {
            selectedMuscleGroup.Remove(dayOfWeek);
            StateHasChanged();
        }
    }

    private void StartEditingExercise(DayOfWeek dayOfWeek, int exerciseId)
    {
        editingExercises.Add((dayOfWeek, exerciseId));
    }

    private void StopEditingExercise(DayOfWeek dayOfWeek, int exerciseId)
    {
        editingExercises.Remove((dayOfWeek, exerciseId));
    }

    private IEnumerable<Exercise> GetExercisesForDay(DayOfWeek dayOfWeek)
    {
        if (selectedMuscleGroup.TryGetValue(dayOfWeek, out var mg) && mg != null)
        {
            return allExercises.Where(ex => ex.ExerciseMuscleGroups.Any(emg => emg.MuscleGroup.Name == mg.ToString()));
        }
        return Enumerable.Empty<Exercise>();
    }

    private void RemoveExerciseFromDay(WorkoutDay day, WorkoutDayExercise ex)
    {
        day.Exercises.Remove(ex);
        StateHasChanged();
    }

    private void OnDayOfWeekChanged(WorkoutDay day, object? value)
    {
        if (value is null) return;
        if (!Enum.TryParse<DayOfWeek>(value.ToString(), out var newDayOfWeek)) return;
        if (workout.Days.Any(d => d != day && d.DayOfWeek == newDayOfWeek)) return;
        day.DayOfWeek = newDayOfWeek;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
            Db.Workouts.Update(workout);
        else
            Db.Workouts.Add(workout);

        await Db.SaveChangesAsync();

        if (saveAsTemplate)
        {
            var template = new WorkoutTemplate
            {
                Name = workout.Name,
                CreatedOn = DateTime.UtcNow
            };

            int dayNumber = 1;
            foreach (var wDay in workout.Days.OrderBy(d => d.DayOfWeek))
            {
                var tDay = new WorkoutTemplateDay
                {
                    DayOfWeek = wDay.DayOfWeek,
                    DayNumber = dayNumber++,
                };

                foreach (var wEx in wDay.Exercises.OrderBy(e => e.OrderInDay))
                {
                    var tEx = new WorkoutTemplateDayExercise
                    {
                        ExerciseId = wEx.ExerciseId,
                        OrderInDay = wEx.OrderInDay
                    };
                    tDay.Exercises.Add(tEx);
                }

                template.Days.Add(tDay);
            }

            Db.WorkoutTemplates.Add(template);
            await Db.SaveChangesAsync();

            workout.WorkoutTemplateId = template.Id;
            Db.Workouts.Update(workout);
            await Db.SaveChangesAsync();
        }

        if (!Id.HasValue)
            await CreateUpcomingWeekAsync(workout);

        Navigation.NavigateTo("/workouts");
    }

    private async Task CreateUpcomingWeekAsync(Workout workout)
    {
        WorkoutTemplate? template = null;
        if (workout.WorkoutTemplateId.HasValue)
        {
            template = await Db.WorkoutTemplates
                .Include(t => t.Days)
                    .ThenInclude(d => d.Exercises)
                .FirstOrDefaultAsync(t => t.Id == workout.WorkoutTemplateId.Value);
        }

        var startDate = workout.StartDate ?? DateTime.Today;

        for (int i = 0; i < 7; i++)
        {
            var dow = startDate.AddDays(i).DayOfWeek;
            var wDay = new WorkoutDay
            {
                WorkoutId = workout.Id,
                DayOfWeek = dow,
                Name = dow.ToString()
            };
            Db.WorkoutDays.Add(wDay);
            await Db.SaveChangesAsync();

            if (template != null)
            {
                var tDay = template.Days.FirstOrDefault(d => d.DayOfWeek == dow);
                if (tDay != null)
                {
                    foreach (var tEx in tDay.Exercises.OrderBy(e => e.OrderInDay))
                    {
                        var wEx = new WorkoutDayExercise
                        {
                            WorkoutDayId = wDay.Id,
                            ExerciseId = tEx.ExerciseId,
                            OrderInDay = tEx.OrderInDay
                        };
                        Db.WorkoutDayExercises.Add(wEx);
                    }

                    await Db.SaveChangesAsync();
                }
            }
        }
    }

    private async Task DeleteWorkout()
    {
        if (!Id.HasValue) return;

        var workoutToDelete = await Db.Workouts.FindAsync(Id.Value);
        if (workoutToDelete != null)
        {
            Db.Workouts.Remove(workoutToDelete);
            await Db.SaveChangesAsync();
        }

        Navigation.NavigateTo("/workouts");
    }
}
