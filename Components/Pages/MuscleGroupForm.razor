@page "/musclegroups/form/{Id:int?}"
@page "/musclegroups/create"
@page "/musclegroups/edit/{Id:int}"
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore
@using Swol.Data.Models.Config

<PageTitle>@PageTitle</PageTitle>

<div class="max-w-4xl mx-auto p-4 space-y-6">

    <div class="flex items-center justify-between mb-6">
        <div class="flex">
            @if (Id.HasValue)
            {
                <button type="button" class="text-red-600 text-xl mr-4" @onclick="DeleteGroup">
                    <i class="bi bi-trash"></i>
                </button>
            }
            <div class="text-2xl font-bold">@PageTitle</div>
        </div>
        <button type="submit" form="MuscleGroupForm" class="text-blue-600 hover:text-blue-800 text-2xl">
            <i class="bi bi-floppy"></i>
        </button>
    </div>

    <EditForm Model="group" OnValidSubmit="HandleValidSubmit" FormName="MuscleGroupForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="mb-4 text-red-600" />
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
            <InputText class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="group.Name" />
        </div>
    </EditForm>

</div>

@code {
    [Parameter] public int? Id { get; set; }

    private MuscleGroup group = new();
    private string PageTitle => Id.HasValue ? "Edit Muscle Group" : "Add Muscle Group";

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
            group = await Db.MuscleGroups.FirstOrDefaultAsync(mg => mg.Id == Id.Value) ?? new MuscleGroup();
        else
            group = new MuscleGroup();
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
            Db.MuscleGroups.Update(group);
        else
            Db.MuscleGroups.Add(group);

        await Db.SaveChangesAsync();
        Navigation.NavigateTo("/musclegroups");
    }

    private async Task DeleteGroup()
    {
        if (!Id.HasValue) return;

        var toDelete = await Db.MuscleGroups.FindAsync(Id.Value);
        if (toDelete != null)
        {
            Db.MuscleGroups.Remove(toDelete);
            await Db.SaveChangesAsync();
        }

        Navigation.NavigateTo("/musclegroups");
    }
}
