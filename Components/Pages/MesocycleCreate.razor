@page "/mesocycles/create"
@using Swol.Data.Models
@using Microsoft.EntityFrameworkCore
@using Swol.Enums

<button type="submit" form="mesocycleForm" class="btn btn-primary">Create Mesocycle</button>

<div class="row pt-2">
    <div class="col-12">
        <EditForm Model="mesocycle" OnValidSubmit="HandleSubmit" id="mesocycleForm">
            <div class="row mb-3">
                <div class="col-12">
                    <div class="row">
                        <!-- Name and Number of Weeks on the left -->
                        <div class="col-md-6 d-flex flex-column justify-content-between">
                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" id="name" class="form-control" @bind="mesocycle.Name" />
                            </div>
                            <div>
                                <label for="weeks" class="form-label">Number of Weeks</label>
                                <input type="number" id="weeks" class="form-control" min="1" max="52" @bind="mesocycle.NumberOfWeeks" />
                            </div>
                        </div>
                        <!-- Description on the right -->
                        <div class="col-md-6 d-flex flex-column">
                            <label for="description" class="form-label">Description</label>
                            <textarea id="description" class="form-control" rows="5" @bind="mesocycle.Description"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="d-flex align-items-center mb-2">
                <h4 class="mb-0 pe-4">Days</h4>
                <button type="button" class="btn btn-sm btn-primary" @onclick="AddDay">Add Day</button>
            </div>
            <div class="mb-3">
                <div class="days-scroll d-flex flex-row gap-2 overflow-auto flex-nowrap w-100">
                    @foreach (var day in mesocycle.Days.OrderBy(d => d.DayOfWeek))
                    {
                        <div class="card" style="min-width: 180px;">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <InputSelect class="form-select form-select-sm w-auto" @bind-Value="day.DayOfWeek" @onchange="e => OnDayOfWeekChanged(day, e.Value)">
                                    @foreach (var dayOfWeek in Enum.GetValues<DayOfWeek>())
                                    {
                                        if (!mesocycle.Days.Any(d => d != day && d.DayOfWeek == dayOfWeek))
                                        {
                                            <option value="@dayOfWeek">@dayOfWeek</option>
                                        }
                                    }
                                </InputSelect>
                                <button type="button" class="btn p-0 border-0 bg-transparent" style="color: black;" @onclick="() => RemoveDay(day)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                            <div class="card-body p-2">
                                <ul class="list-unstyled mb-2">
                                    @if (day.Exercises.Any())
                                    {
                                        foreach (var ex in day.Exercises)
                                        {
                                            <li class="d-flex justify-content-between align-items-center">
                                                <span>
                                                    @ex.Exercise?.Name
                                                    <small class="text-muted">(@string.Join(", ", ex.Exercise?.ExerciseMuscleGroups.Select(emg => emg.MuscleGroup.Name) ?? new List<string>()))</small>
                                                </span>
                                                <button type="button" class="btn btn-sm btn-outline-danger ms-2" @onclick="() => RemoveExerciseFromDay(day, ex)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li class="text-muted">No exercises</li>
                                    }
                                </ul>
                                <div>
                                    @if (!selectedMuscleGroup.TryGetValue(day.DayOfWeek, out var selMg) || selMg == null)
                                    {
                                        <!-- Muscle Group Selection -->
                                        <select class="form-select form-select-sm mb-2"
                                                @onchange="e => OnMuscleGroupChanged(day.DayOfWeek, e?.Value ?? string.Empty)">
                                            <option value="">-- Select Muscle Group --</option>
                                            @foreach (var mg in Enum.GetValues<MuscleGroups>())
                                            {
                                                <option value="@mg">@mg</option>
                                            }
                                        </select>
                                    }
                                    else if (GetExercisesForDay(day.DayOfWeek).Any())
                                    {
                                        <!-- Exercise Selection (filtered by muscle group) -->
                                        <select class="form-select form-select-sm mb-2"
                                                @bind="selectedExerciseId[day.DayOfWeek]">
                                            <option value="0">-- Select Exercise --</option>
                                            @foreach (var ex in GetExercisesForDay(day.DayOfWeek))
                                            {
                                                <option value="@ex.Id">
                                                    @ex.Name (@string.Join(", ", ex.ExerciseMuscleGroups.Select(emg => emg.MuscleGroup.Name)))
                                                </option>
                                            }
                                        </select>
                                        <button type="button" class="btn btn-sm btn-success w-100" @onclick="() => AddExerciseToDay(day)"
                                                disabled="@(selectedExerciseId.TryGetValue(day.DayOfWeek, out var exId) && exId > 0 ? null : true)">
                                            Add
                                        </button>
                                    }
                                    else if (selectedMuscleGroup.TryGetValue(day.DayOfWeek, out var mg) && mg != null && !GetExercisesForDay(day.DayOfWeek).Any())
                                    {
                                        <div class="text-muted mb-2">No exercises for this muscle group.</div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </EditForm>
    </div>
</div>