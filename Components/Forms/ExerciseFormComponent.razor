@using Swol.Data.Models.Config
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@inject ILogger<ExerciseFormComponent> Logger

<PageTitle>@PageTitle</PageTitle>

<div class="max-w-4xl mx-auto p-4 space-y-6">

<h1 class="text-2xl font-bold mb-6">@PageTitle</h1>

<EditForm Model="exercise" OnValidSubmit="HandleValidSubmit" FormName="ExerciseForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="mb-4 text-red-600" />
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
        <InputText class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="exercise.Name" />
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
        <InputTextArea class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="exercise.Description" />
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Muscle Groups</label>
            <select class="block w-full rounded border border-gray-300 px-3 py-2 leading-loose focus:outline-none focus:ring-2 focus:ring-blue-500" multiple 
            size="@muscleGroups.Count" @onchange="OnMuscleGroupsChanged">
                @foreach (var mg in muscleGroups)
            {
                <option value="@mg.Id" selected="@selectedMuscleGroupIds.Contains(mg.Id)">@mg.Name</option>
            }
        </select>
    </div>
    <div class="flex items-center mt-6">
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded shadow">@(Id.HasValue ? "Save" : "Create")</button>
        @if (Id.HasValue)
        {
            <button type="button" class="ml-3 bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded shadow" @onclick="DeleteExercise">Delete</button>
        }
        <a class="ml-3 bg-gray-200 hover:bg-gray-300 text-black font-semibold py-2 px-4 rounded shadow" href="/exercises">Cancel</a>
    </div>
</EditForm>

</div>

@code {
    [Parameter] public int? Id { get; set; }

    private Exercise exercise = new();
    private List<MuscleGroup> muscleGroups = new();
    private List<int> selectedMuscleGroupIds = new();
    private string PageTitle => Id.HasValue ? "Edit Exercise" : "Add Exercise";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            muscleGroups = await Db.MuscleGroups.OrderBy(mg => mg.Name).ToListAsync();

            if (Id.HasValue)
            {
                exercise = await Db.Exercises
                    .Include(e => e.ExerciseMuscleGroups)
                    .FirstOrDefaultAsync(e => e.Id == Id.Value) ?? new Exercise();

                selectedMuscleGroupIds = exercise.ExerciseMuscleGroups
                    .Select(emg => emg.MuscleGroupId).ToList();
            }
            else
            {
                exercise = new Exercise();
                selectedMuscleGroupIds = new List<int>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading ExerciseForm for Id {Id}", Id);
            throw;
        }
    }

    private void OnMuscleGroupsChanged(ChangeEventArgs e)
    {
        if (e.Value is string[] values)
        {
            selectedMuscleGroupIds = values.Select(int.Parse).ToList();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
            Db.Exercises.Update(exercise);
        else
            Db.Exercises.Add(exercise);

        await Db.SaveChangesAsync();

        var existing = Db.ExerciseMuscleGroups.Where(emg => emg.ExerciseId == exercise.Id);
        Db.ExerciseMuscleGroups.RemoveRange(existing);

        foreach (var mgId in selectedMuscleGroupIds)
        {
            Db.ExerciseMuscleGroups.Add(new ExerciseMuscleGroup { ExerciseId = exercise.Id, MuscleGroupId = mgId });
        }

        await Db.SaveChangesAsync();
        Navigation.NavigateTo("/exercises");
    }

    private async Task DeleteExercise()
    {
        if (!Id.HasValue) return;

        var links = Db.ExerciseMuscleGroups.Where(emg => emg.ExerciseId == Id.Value);
        Db.ExerciseMuscleGroups.RemoveRange(links);

        var ex = await Db.Exercises.FindAsync(Id.Value);
        if (ex != null)
        {
            Db.Exercises.Remove(ex);
            await Db.SaveChangesAsync();
        }

        Navigation.NavigateTo("/exercises");
    }
}
