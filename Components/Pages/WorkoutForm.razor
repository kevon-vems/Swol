@page "/workouts/create"
@page "/workouts/edit/{Id:int}"
@page "/workouts/delete/{Id:int}"
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@using Swol.Data.Models
@using Swol.Data.Models.Work
@using Swol.Data.Models.Template

<PageTitle>@pageTitle</PageTitle>

<div class="max-w-4xl mx-auto p-4 space-y-6">

<h1 class="text-2xl font-bold mb-6">@pageTitle</h1>

<div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-6 rounded">
    <strong>What is a Workout?</strong><br />
    A Workout in this application is a collection of exercises performed together as a session. Each Workout can include multiple exercises, their order, sets, reps, and weights. Workouts are designed to be repeated and tracked over time, and can be used as part of a larger training plan (Workout Template).
    <br /><br />
    <strong>Example:</strong><br />
    <em>Name:</em> Push Day<br />
    <em>Description:</em> Upper body workout focused on chest, shoulders, and triceps.<br />
    <em>Exercises:</em>
    <ul class="list-disc list-inside ml-4">
        <li>Barbell Bench Press: 4 sets x 8 reps @@ 60kg</li>
        <li>Overhead Press: 3 sets x 10 reps @@ 35kg</li>
        <li>Triceps Pushdown: 3 sets x 12 reps @@ 25kg</li>
    </ul>
</div>

<EditForm Model="workout" OnValidSubmit="HandleValidSubmit" FormName="WorkoutCreateForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="mb-4 text-red-600" />
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
        <InputText class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="workout.Name" disabled="@isDeleteMode" />
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
        <InputTextArea class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="workout.Description" disabled="@isDeleteMode" />
    </div>
    <div class="mb-4 flex items-center gap-2">
        <InputCheckbox id="saveTemplate" @bind-Value="saveAsTemplate" disabled="@isDeleteMode" />
        <label for="saveTemplate" class="text-sm font-medium text-gray-700">Save as template</label>
    </div>
    <div class="flex items-center mt-6">
        @if (!isDeleteMode)
        {
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded shadow">@(Id.HasValue ? "Save" : "Create")</button>
            @if (Id.HasValue)
            {
                <button type="button" class="ml-3 bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded shadow" @onclick="DeleteWorkout">Delete</button>
            }
        }
        else
        {
            <button type="button" class="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded shadow" @onclick="DeleteWorkout">Delete</button>
        }
        <a class="ml-3 bg-gray-200 hover:bg-gray-300 text-black font-semibold py-2 px-4 rounded shadow" href="/workouts">Cancel</a>
    </div>
</EditForm>

</div>

@code {
    [Parameter] public int? Id { get; set; }

    private Workout workout = new();
    private bool saveAsTemplate;
    private bool isDeleteMode;
    private string pageTitle = "Add Workout";

    protected override async Task OnParametersSetAsync()
    {
        var relative = Navigation.ToBaseRelativePath(Navigation.Uri).ToLowerInvariant();
        isDeleteMode = relative.StartsWith("workouts/delete");

        if (Id.HasValue)
        {
            workout = await Db.Workouts.FirstOrDefaultAsync(w => w.Id == Id.Value) ?? new Workout();
            pageTitle = isDeleteMode ? "Delete Workout" : "Edit Workout";
        }
        else
        {
            workout = new Workout();
            pageTitle = "Add Workout";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
            Db.Workouts.Update(workout);
        else
            Db.Workouts.Add(workout);

        await Db.SaveChangesAsync();

        if (saveAsTemplate)
        {
            var template = new WorkoutTemplate
            {
                Name = workout.Name,
                CreatedOn = DateTime.UtcNow
            };

            int dayNumber = 1;
            foreach (var wDay in workout.Days.OrderBy(d => d.DayOfWeek))
            {
                var tDay = new WorkoutTemplateDay
                {
                    DayOfWeek = wDay.DayOfWeek,
                    DayNumber = dayNumber++,
                };

                foreach (var wEx in wDay.Exercises.OrderBy(e => e.OrderInDay))
                {
                    var tEx = new WorkoutTemplateDayExercise
                    {
                        ExerciseId = wEx.ExerciseId,
                        OrderInDay = wEx.OrderInDay
                    };
                    tDay.Exercises.Add(tEx);
                }

                template.Days.Add(tDay);
            }

            Db.WorkoutTemplates.Add(template);
            await Db.SaveChangesAsync();

            workout.WorkoutTemplateId = template.Id;
            Db.Workouts.Update(workout);
            await Db.SaveChangesAsync();
        }

        if (!Id.HasValue)
            await CreateUpcomingWeekAsync(workout);

        Navigation.NavigateTo("/workouts");
    }

    private async Task CreateUpcomingWeekAsync(Workout workout)
    {
        WorkoutTemplate? template = null;
        if (workout.WorkoutTemplateId.HasValue)
        {
            template = await Db.WorkoutTemplates
                .Include(t => t.Days)
                    .ThenInclude(d => d.Exercises)
                .FirstOrDefaultAsync(t => t.Id == workout.WorkoutTemplateId.Value);
        }

        var startDate = workout.StartDate ?? DateTime.Today;

        for (int i = 0; i < 7; i++)
        {
            var dow = startDate.AddDays(i).DayOfWeek;
            var wDay = new WorkoutDay
            {
                WorkoutId = workout.Id,
                DayOfWeek = dow,
                Name = dow.ToString()
            };
            Db.WorkoutDays.Add(wDay);
            await Db.SaveChangesAsync();

            if (template != null)
            {
                var tDay = template.Days.FirstOrDefault(d => d.DayOfWeek == dow);
                if (tDay != null)
                {
                    foreach (var tEx in tDay.Exercises.OrderBy(e => e.OrderInDay))
                    {
                        var wEx = new WorkoutDayExercise
                        {
                            WorkoutDayId = wDay.Id,
                            ExerciseId = tEx.ExerciseId,
                            OrderInDay = tEx.OrderInDay
                        };
                        Db.WorkoutDayExercises.Add(wEx);
                    }

                    await Db.SaveChangesAsync();
                }
            }
        }
    }

    private async Task DeleteWorkout()
    {
        if (!Id.HasValue) return;

        var workoutToDelete = await Db.Workouts.FindAsync(Id.Value);
        if (workoutToDelete != null)
        {
            Db.Workouts.Remove(workoutToDelete);
            await Db.SaveChangesAsync();
        }

        Navigation.NavigateTo("/workouts");
    }
}
