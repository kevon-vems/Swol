// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swol.Data;

#nullable disable

namespace Swol.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250616225044_ExerciseMuscleGroupReference")]
    partial class ExerciseMuscleGroupReference
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Swol.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Chest",
                            Description = "Chest exercise",
                            MuscleGroupId = 1,
                            Name = "Bench Press"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Legs",
                            Description = "Leg exercise",
                            MuscleGroupId = 22,
                            Name = "Squat"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Back",
                            Description = "Back and legs",
                            MuscleGroupId = 23,
                            Name = "Deadlift"
                        });
                });

            modelBuilder.Entity("Swol.Data.Models.ExerciseSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("SetNumber")
                        .HasColumnType("int");

                    b.Property<double?>("WeightInKg")
                        .HasColumnType("float");

                    b.Property<int>("WorkoutLogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutLogId");

                    b.ToTable("ExerciseSets");
                });

            modelBuilder.Entity("Swol.Data.Models.MuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MuscleGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Upper Chest"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Middle Chest"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lower Chest"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lats"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Upper Back (Traps, Rhomboids)"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Lower Back"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Shoulders"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Front Delts"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Side Delts"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Rear Delts"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Traps"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Arms"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Forearms"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Core"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Abs"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Obliques"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Glutes"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Quads"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Hamstrings"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Calves"
                        });
                });

            modelBuilder.Entity("Swol.Data.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Swol.Data.Models.WorkoutExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInWorkout")
                        .HasColumnType("int");

                    b.Property<int?>("RepsPerSet")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<double?>("WeightInKg")
                        .HasColumnType("float");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutExercises");
                });

            modelBuilder.Entity("Swol.Data.Models.WorkoutLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutLogs");
                });

            modelBuilder.Entity("Swol.Data.Models.Exercise", b =>
                {
                    b.HasOne("Swol.Data.Models.MuscleGroup", "MuscleGroup")
                        .WithMany()
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("Swol.Data.Models.ExerciseSet", b =>
                {
                    b.HasOne("Swol.Data.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swol.Data.Models.WorkoutLog", "WorkoutLog")
                        .WithMany("ExerciseSets")
                        .HasForeignKey("WorkoutLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutLog");
                });

            modelBuilder.Entity("Swol.Data.Models.WorkoutExercise", b =>
                {
                    b.HasOne("Swol.Data.Models.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swol.Data.Models.Workout", "Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Swol.Data.Models.WorkoutLog", b =>
                {
                    b.HasOne("Swol.Data.Models.Workout", "Workout")
                        .WithMany("WorkoutLogs")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Swol.Data.Models.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("Swol.Data.Models.Workout", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("WorkoutLogs");
                });

            modelBuilder.Entity("Swol.Data.Models.WorkoutLog", b =>
                {
                    b.Navigation("ExerciseSets");
                });
#pragma warning restore 612, 618
        }
    }
}
