// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swol.Data;

#nullable disable

namespace Swol.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250620222530_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Swol.Data.Models.Config.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Chest exercise",
                            Name = "Bench Press"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Leg exercise",
                            Name = "Squat"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Back and legs",
                            Name = "Deadlift"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Seated, bring arms together in front (pec-dec arms)",
                            Name = "Pec Fly"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Press at an incline angle",
                            Name = "Incline Press"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Pull bar from overhead to hips",
                            Name = "Pull Over"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Pull handles vertically to chin",
                            Name = "Upright Row"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Side arm raise (machine/cable)",
                            Name = "Deltoid (Lateral) Raise"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Overhead pressing of handles",
                            Name = "Shoulder Press"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Pull handles toward torso while bent over",
                            Name = "Bent Over Row"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Seated, pull handles to waist",
                            Name = "Seated Row"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Elevate shoulders with resistance",
                            Name = "Shoulder Shrug"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Curl torso with cable or strap",
                            Name = "Ab Crunch"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Side bends with cable or strap",
                            Name = "Oblique Bend"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Curl using low pulley",
                            Name = "Standing Biceps Curl"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Curl over preacher pad (if attachment available)",
                            Name = "Preacher Curl"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Curl with overhand grip (low pulley or bar)",
                            Name = "Reverse Curl"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Push cable down from overhead pulley",
                            Name = "Tricep Press Down"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Seated or standing cable extension",
                            Name = "Tricep Extension"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Face away from pulley, extend arms overhead",
                            Name = "Overhead Tricep Extension"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Standing, bring cables together in front",
                            Name = "Cable Chest Fly"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Single-arm, pull cable across body",
                            Name = "Cable Crossover"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Side arm raise using low cable",
                            Name = "Cable Lateral Raise"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Front arm raise with cable",
                            Name = "Cable Front Raise"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Arms out to sides using cables",
                            Name = "Cable Reverse Fly (Rear Delt)"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Pull bar down from overhead",
                            Name = "Lat Pulldown (with bar)"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Pull cable to abs or lower chest",
                            Name = "Cable Row (Standing/Kneeling)"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Diagonal cable pull for core rotation",
                            Name = "Woodchop (Cable)"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Lateral trunk bend with cable",
                            Name = "Cable Side Bend"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Straighten knee with padded lever",
                            Name = "Leg Extension"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Curl heel to glute with padded lever or cable",
                            Name = "Leg Curl"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Rear leg extension using low cable/strap",
                            Name = "Glute Kickback"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Leg away from midline with ankle strap",
                            Name = "Hip Abduction (Cable)"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Leg toward midline with ankle strap",
                            Name = "Hip Adduction (Cable)"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Heel to glute using ankle strap",
                            Name = "Standing Leg Curl (Cable)"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Push up on toes using resistance",
                            Name = "Standing Calf Raise (Cable)"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Seated, push platform with feet",
                            Name = "Leg Press (Optional Attachment)"
                        });
                });

            modelBuilder.Entity("Swol.Data.Models.Config.ExerciseMuscleGroup", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "MuscleGroupId");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("ExerciseMuscleGroups");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            MuscleGroupId = 1
                        },
                        new
                        {
                            ExerciseId = 4,
                            MuscleGroupId = 1
                        },
                        new
                        {
                            ExerciseId = 5,
                            MuscleGroupId = 1
                        },
                        new
                        {
                            ExerciseId = 21,
                            MuscleGroupId = 1
                        },
                        new
                        {
                            ExerciseId = 22,
                            MuscleGroupId = 1
                        },
                        new
                        {
                            ExerciseId = 3,
                            MuscleGroupId = 2
                        },
                        new
                        {
                            ExerciseId = 6,
                            MuscleGroupId = 2
                        },
                        new
                        {
                            ExerciseId = 10,
                            MuscleGroupId = 2
                        },
                        new
                        {
                            ExerciseId = 11,
                            MuscleGroupId = 2
                        },
                        new
                        {
                            ExerciseId = 26,
                            MuscleGroupId = 2
                        },
                        new
                        {
                            ExerciseId = 27,
                            MuscleGroupId = 2
                        },
                        new
                        {
                            ExerciseId = 7,
                            MuscleGroupId = 3
                        },
                        new
                        {
                            ExerciseId = 8,
                            MuscleGroupId = 3
                        },
                        new
                        {
                            ExerciseId = 9,
                            MuscleGroupId = 3
                        },
                        new
                        {
                            ExerciseId = 12,
                            MuscleGroupId = 3
                        },
                        new
                        {
                            ExerciseId = 23,
                            MuscleGroupId = 3
                        },
                        new
                        {
                            ExerciseId = 24,
                            MuscleGroupId = 3
                        },
                        new
                        {
                            ExerciseId = 25,
                            MuscleGroupId = 3
                        },
                        new
                        {
                            ExerciseId = 1,
                            MuscleGroupId = 4
                        },
                        new
                        {
                            ExerciseId = 5,
                            MuscleGroupId = 4
                        },
                        new
                        {
                            ExerciseId = 18,
                            MuscleGroupId = 4
                        },
                        new
                        {
                            ExerciseId = 19,
                            MuscleGroupId = 4
                        },
                        new
                        {
                            ExerciseId = 20,
                            MuscleGroupId = 4
                        },
                        new
                        {
                            ExerciseId = 15,
                            MuscleGroupId = 5
                        },
                        new
                        {
                            ExerciseId = 16,
                            MuscleGroupId = 5
                        },
                        new
                        {
                            ExerciseId = 2,
                            MuscleGroupId = 6
                        },
                        new
                        {
                            ExerciseId = 30,
                            MuscleGroupId = 6
                        },
                        new
                        {
                            ExerciseId = 37,
                            MuscleGroupId = 6
                        },
                        new
                        {
                            ExerciseId = 32,
                            MuscleGroupId = 7
                        },
                        new
                        {
                            ExerciseId = 33,
                            MuscleGroupId = 7
                        },
                        new
                        {
                            ExerciseId = 34,
                            MuscleGroupId = 7
                        },
                        new
                        {
                            ExerciseId = 37,
                            MuscleGroupId = 7
                        },
                        new
                        {
                            ExerciseId = 31,
                            MuscleGroupId = 8
                        },
                        new
                        {
                            ExerciseId = 35,
                            MuscleGroupId = 8
                        },
                        new
                        {
                            ExerciseId = 37,
                            MuscleGroupId = 8
                        },
                        new
                        {
                            ExerciseId = 36,
                            MuscleGroupId = 9
                        },
                        new
                        {
                            ExerciseId = 37,
                            MuscleGroupId = 9
                        },
                        new
                        {
                            ExerciseId = 12,
                            MuscleGroupId = 10
                        },
                        new
                        {
                            ExerciseId = 6,
                            MuscleGroupId = 11
                        },
                        new
                        {
                            ExerciseId = 26,
                            MuscleGroupId = 11
                        },
                        new
                        {
                            ExerciseId = 17,
                            MuscleGroupId = 12
                        },
                        new
                        {
                            ExerciseId = 13,
                            MuscleGroupId = 13
                        },
                        new
                        {
                            ExerciseId = 14,
                            MuscleGroupId = 13
                        },
                        new
                        {
                            ExerciseId = 28,
                            MuscleGroupId = 13
                        },
                        new
                        {
                            ExerciseId = 29,
                            MuscleGroupId = 13
                        });
                });

            modelBuilder.Entity("Swol.Data.Models.Config.MuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MuscleGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shoulders"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Quads"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Glutes"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hamstrings"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Calves"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Traps"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Lats"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Forearms"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Abs"
                        });
                });

            modelBuilder.Entity("Swol.Data.Models.Template.WorkoutTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkoutTemplates");
                });

            modelBuilder.Entity("Swol.Data.Models.Template.WorkoutTemplateDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("WorkoutTemplateDays");
                });

            modelBuilder.Entity("Swol.Data.Models.Template.WorkoutTemplateDayExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInDay")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutTemplateDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutTemplateDayId");

                    b.ToTable("WorkoutTemplateDayExercises");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkoutTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.WorkoutDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutDays");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.WorkoutDayExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInDay")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutDayId");

                    b.ToTable("WorkoutDayExercises");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.WorkoutDayExerciseSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("SetNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightInLb")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("WorkoutDayExerciseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutDayExerciseId");

                    b.ToTable("WorkoutDayExerciseSets");
                });

            modelBuilder.Entity("Swol.Data.Models.Config.ExerciseMuscleGroup", b =>
                {
                    b.HasOne("Swol.Data.Models.Config.Exercise", "Exercise")
                        .WithMany("ExerciseMuscleGroups")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swol.Data.Models.Config.MuscleGroup", "MuscleGroup")
                        .WithMany()
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("Swol.Data.Models.Template.WorkoutTemplateDay", b =>
                {
                    b.HasOne("Swol.Data.Models.Template.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany("Days")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Swol.Data.Models.Template.WorkoutTemplateDayExercise", b =>
                {
                    b.HasOne("Swol.Data.Models.Config.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swol.Data.Models.Template.WorkoutTemplateDay", "WorkoutTemplateDay")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutTemplateDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutTemplateDay");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.WorkoutDay", b =>
                {
                    b.HasOne("Swol.Data.Models.Work.Workout", "Workout")
                        .WithMany("Days")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.WorkoutDayExercise", b =>
                {
                    b.HasOne("Swol.Data.Models.Config.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swol.Data.Models.Work.WorkoutDay", "WorkoutDay")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutDay");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.WorkoutDayExerciseSet", b =>
                {
                    b.HasOne("Swol.Data.Models.Work.WorkoutDayExercise", "WorkoutDayExercise")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutDayExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutDayExercise");
                });

            modelBuilder.Entity("Swol.Data.Models.Config.Exercise", b =>
                {
                    b.Navigation("ExerciseMuscleGroups");
                });

            modelBuilder.Entity("Swol.Data.Models.Template.WorkoutTemplate", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("Swol.Data.Models.Template.WorkoutTemplateDay", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.Workout", b =>
                {
                    b.Navigation("Days");
                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.WorkoutDay", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Swol.Data.Models.Work.WorkoutDayExercise", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
