@page "/workoutlogs/create"
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Nav
@using Swol.Data.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Add Workout Log</PageTitle>

<div class="max-w-4xl mx-auto p-4 space-y-6">

<h1 class="text-3xl font-bold mb-6">Add Workout Log</h1>

<EditForm Model="@log" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="flex flex-col md:flex-row gap-6 mb-6">
        <div class="flex-1">
            <label class="block text-sm font-medium text-gray-700 mb-1">Workout</label>
            <InputSelect class="block w-full rounded border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50" @bind-Value="log.WorkoutId">
                <option value="">-- Select Workout --</option>
                @foreach (var workout in workouts)
                {
                    <option value="@workout.Id">@workout.Name</option>
                }
            </InputSelect>
        </div>
        <div class="flex-1">
            <label class="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
            <InputDate class="block w-full rounded border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50" @bind-Value="log.StartTime" />
        </div>
    </div>

    <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-1">Template (Optional)</label>
        <div class="flex flex-col md:flex-row gap-6">
            <div class="flex-1">
                <InputSelect class="block w-full rounded border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50" @bind-Value="selectedTemplateId">
                    <option value="">-- No Template --</option>
                    @foreach (var template in templates)
                    {
                        <option value="@template.Id">@template.Name @(template.IsActive ? "(Active)" : "")</option>
                    }
                </InputSelect>
            </div>
            <div class="flex-1">
                @if (selectedTemplateId.HasValue)
                {
                    <InputSelect class="block w-full rounded border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50" @bind-Value="log.WorkoutTemplateWeek">
                        <option value="">-- Select Week --</option>
                        @for (int i = 1; i <= selectedTemplate?.NumberOfWeeks; i++)
                        {
                            <option value="@i">Week @i @(i == selectedTemplate?.NumberOfWeeks ? "(Deload)" : "")</option>
                        }
                    </InputSelect>
                }
            </div>
        </div>
    </div>
</EditForm>

</div>

@code {
    private WorkoutLog log = new WorkoutLog();
    private List<Workout> workouts = new List<Workout>();
    private List<WorkoutTemplate> templates = new List<WorkoutTemplate>();
    private int? selectedTemplateId;
    private WorkoutTemplate? selectedTemplate;

    protected override async Task OnInitializedAsync()
    {
        workouts = await Db.Workouts.ToListAsync();
        templates = await Db.WorkoutTemplates.Where(m => m.IsActive).ToListAsync();
    }

    private int? _lastTemplateId;
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (selectedTemplateId != _lastTemplateId)
        {
            if (selectedTemplateId.HasValue)
            {
                selectedTemplate = templates.FirstOrDefault(m => m.Id == selectedTemplateId.Value);
            }
            else
            {
                selectedTemplate = null;
            }
            log.WorkoutTemplateWeek = null; // Reset week selection when template changes
            _lastTemplateId = selectedTemplateId;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (selectedTemplateId.HasValue)
        {
            log.WorkoutTemplateId = selectedTemplateId.Value;
        }
        else
        {
            log.WorkoutTemplateId = null;
        }
        Db.WorkoutLogs.Add(log);
        await Db.SaveChangesAsync();
        Nav.NavigateTo("/workoutlogs");
    }
}