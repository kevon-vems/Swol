@using Swol.Data.Models.Config
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@inject ILogger<ExerciseFormComponent> Logger

<PageTitle>@PageTitle</PageTitle>

<div class="max-w-4xl mx-auto p-4 space-y-6">

    <div class="flex items-center justify-between mb-6">
        <div class="flex">
            @if (Id.HasValue)
            {
                <button type="button" class="text-red-600 text-xl mr-4" @onclick="DeleteExercise">
                    <i class="bi bi-trash"></i>
                </button>
            }

            <div class="text-2xl font-bold">@PageTitle</div>
        </div>
        <button type="submit" form="ExerciseForm" class="text-blue-600 hover:text-blue-800 text-2xl">
            <i class="bi bi-floppy"></i>
        </button>
    </div>

    <EditForm Model="exercise" OnValidSubmit="HandleValidSubmit" FormName="ExerciseForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="mb-4 text-red-600" />
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
            <InputText class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="exercise.Name" />
        </div>
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <InputTextArea class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="exercise.Description" />
        </div>
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Muscle Groups</label>
            <div class="flex flex-col sm:flex-row gap-4">
                <div class="flex-1">
                    <h3 class="text-sm font-semibold mb-2">Selected</h3>
                    <div class="flex flex-wrap gap-2">
                        @foreach (var mg in muscleGroups.Where(mg => selectedMuscleGroupIds.Contains(mg.Id)))
                        {
                            <button type="button" class="px-3 py-2 bg-blue-600 text-white rounded" @onclick="() => RemoveMuscleGroup(mg.Id)">@mg.Name</button>
                        }
                    </div>
                </div>
                <div class="flex-1">
                    <h3 class="text-sm font-semibold mb-2">Available</h3>
                    <div class="flex flex-wrap gap-2">
                        @foreach (var mg in muscleGroups.Where(mg => !selectedMuscleGroupIds.Contains(mg.Id)))
                        {
                            <button type="button" class="px-3 py-2 bg-gray-200 text-black rounded" @onclick="() => AddMuscleGroup(mg.Id)">@mg.Name</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </EditForm>

</div>

@code {
    [Parameter] public int? Id { get; set; }

    private Exercise exercise = new();
    private List<MuscleGroup> muscleGroups = new();
    private List<int> selectedMuscleGroupIds = new();
    private string PageTitle => Id.HasValue ? "Edit Exercise" : "Add Exercise";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            muscleGroups = await Db.MuscleGroups.OrderBy(mg => mg.Name).ToListAsync();

            if (Id.HasValue)
            {
                exercise = await Db.Exercises
                    .Include(e => e.ExerciseMuscleGroups)
                    .FirstOrDefaultAsync(e => e.Id == Id.Value) ?? new Exercise();

                selectedMuscleGroupIds = exercise.ExerciseMuscleGroups
                    .Select(emg => emg.MuscleGroupId).ToList();
            }
            else
            {
                exercise = new Exercise();
                selectedMuscleGroupIds = new List<int>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading ExerciseForm for Id {Id}", Id);
            throw;
        }
    }


    private void AddMuscleGroup(int id)
    {
        if (!selectedMuscleGroupIds.Contains(id))
        {
            selectedMuscleGroupIds.Add(id);
        }
    }

    private void RemoveMuscleGroup(int id)
    {
        selectedMuscleGroupIds.Remove(id);
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
            Db.Exercises.Update(exercise);
        else
            Db.Exercises.Add(exercise);

        await Db.SaveChangesAsync();

        var existing = Db.ExerciseMuscleGroups.Where(emg => emg.ExerciseId == exercise.Id);
        Db.ExerciseMuscleGroups.RemoveRange(existing);

        foreach (var mgId in selectedMuscleGroupIds)
        {
            Db.ExerciseMuscleGroups.Add(new ExerciseMuscleGroup { ExerciseId = exercise.Id, MuscleGroupId = mgId });
        }

        await Db.SaveChangesAsync();
        Navigation.NavigateTo("/exercises");
    }

    private async Task DeleteExercise()
    {
        if (!Id.HasValue) return;

        var links = Db.ExerciseMuscleGroups.Where(emg => emg.ExerciseId == Id.Value);
        Db.ExerciseMuscleGroups.RemoveRange(links);

        var ex = await Db.Exercises.FindAsync(Id.Value);
        if (ex != null)
        {
            Db.Exercises.Remove(ex);
            await Db.SaveChangesAsync();
        }

        Navigation.NavigateTo("/exercises");
    }
}
