@page "/exercisesets/delete/{Id:int}"
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@using Swol.Data.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete Exercise Set</PageTitle>

<h1>Delete Exercise Set</h1>

@if (set == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="alert alert-warning">
        <strong>Are you sure you want to delete this exercise set?</strong>
    </div>
    <dl class="row">
        <dt class="col-sm-2">Workout Log</dt>
        <dd class="col-sm-10">@set.WorkoutLogId</dd>
        <dt class="col-sm-2">Exercise</dt>
        <dd class="col-sm-10">@set.Exercise?.Name</dd>
        <dt class="col-sm-2">Reps</dt>
        <dd class="col-sm-10">@set.Reps</dd>
        <dt class="col-sm-2">Weight</dt>
        <dd class="col-sm-10">@set.WeightInKg</dd>
    </dl>
    <button class="btn btn-danger" @onclick="DeleteSet">Delete</button>
    <a class="btn btn-secondary ms-2" href="/exercisesets">Cancel</a>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ExerciseSet? set;

    protected override async Task OnInitializedAsync()
    {
        set = await Db.ExerciseSets.Include(es => es.Exercise).FirstOrDefaultAsync(es => es.Id == Id);
        if (set == null)
        {
            Navigation.NavigateTo("/exercisesets");
        }
    }

    private async Task DeleteSet()
    {
        if (set != null)
        {
            Db.ExerciseSets.Remove(set);
            await Db.SaveChangesAsync();
        }
        Navigation.NavigateTo("/exercisesets");
    }
}
