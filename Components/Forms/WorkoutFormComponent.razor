
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore
@using Swol.Components.Pages
@using Swol.Data.Models
@using Swol.Data.Models.Work
@using Swol.Data.Models.Template
@using Swol.Data.Models.Config
@using Swol.Enums

<PageTitle>@PageTitle</PageTitle>

<div class="max-w-4xl mx-auto p-4 space-y-6">

<div class="flex items-center justify-between mb-6">
    <div class="flex">
        @if (Id.HasValue)
        {
            <button type="button" class="text-red-600 text-xl mr-4" @onclick="DeleteWorkout">
                <i class="bi bi-trash"></i>
            </button>
        }
        <div class="text-2xl font-bold">@PageTitle</div>
    </div>
    <button type="submit" form="WorkoutCreateForm" class="text-blue-600 hover:text-blue-800 text-2xl">
        <i class="bi bi-save"></i>
    </button>
</div>

<EditForm Model="workout" OnValidSubmit="HandleValidSubmit" FormName="WorkoutCreateForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="mb-4 text-red-600" />
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
        <InputText class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="workout.Name" />
    </div>
    <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
        <InputTextArea class="block w-full rounded border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="workout.Description" />
    </div>
    <div class="mb-4 flex items-center gap-2">
        <InputCheckbox id="saveTemplate" @bind-Value="saveAsTemplate" />
        <label for="saveTemplate" class="text-sm font-medium text-gray-700">Save as template</label>
    </div>
    <div class="mb-3">
        <div class="flex items-center justify-between mb-2">
            <button type="button" class="px-2 py-1 text-sm rounded border" @onclick="() => ChangeWeek(-1)" disabled="@(currentWeek == 1)">Prev</button>
            <span class="font-semibold">Week @currentWeek</span>
            <button type="button" class="px-2 py-1 text-sm rounded border" @onclick="() => ChangeWeek(1)" disabled="@(currentWeek >= MaxWeek)">Next</button>
        </div>
        <div class="flex flex-row gap-2 overflow-x-auto flex-nowrap items-start w-full max-w-screen sm:max-w-[calc(100vw-250px)]">
            @foreach (var day in workout.Days.Where(d => d.WeekNumber == currentWeek).OrderBy(d => d.OrderNumber))
            {
                <WorkoutDayCard Day="day"
                                WorkoutDays="workout.Days"
                                EditingExercises="editingExercises"
                                SelectedMuscleGroup="selectedMuscleGroup"
                                RemoveDay="RemoveDay"
                                LabelChanged="OnLabelChanged"
                                DayOfWeekChanged="OnDayOfWeekChanged"
                                ExerciseSelected="OnExerciseSelected"
                                MuscleGroupChanged="OnMuscleGroupChanged"
                                RemoveSelectedMuscleGroup="RemoveSelectedMuscleGroup"
                                RemoveExercise="RemoveExerciseFromDay"
                                StartEditingExercise="StartEditingExercise"
                                StopEditingExercise="StopEditingExercise"
                                GetExercisesForDay="GetExercisesForDay" />
            }
            @if (workout.Days.Count(d => d.WeekNumber == currentWeek) < 7)
            {
                <div class="bg-stone-50 rounded w-[250px] min-w-[250px] max-w-[250px] flex flex-col border border-1 border-gray-400 p-2">
                    <button type="button"
                            class="px-2 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition"
                            @onclick="AddDay">
                        Add Day
                    </button>
                </div>
            }
        </div>
    </div>
    
</EditForm>

</div>

@code {
    [Parameter] public int? Id { get; set; }

    private Workout workout = new();
    private bool saveAsTemplate;
    private List<Exercise> allExercises = new();
    private Dictionary<string, MuscleGroups?> selectedMuscleGroup = new();
    private Dictionary<string, int> selectedExerciseId = new();
    private HashSet<(string, int)> editingExercises = new();
    private int currentWeek = 1;
    private int MaxWeek => Math.Max(workout.NumberOfWeeks, workout.Days.Any() ? workout.Days.Max(d => d.WeekNumber) : 1);
    private string PageTitle => Id.HasValue ? "Edit Workout" : "Add Workout";

    protected override async Task OnInitializedAsync()
    {
        allExercises = await Db.Exercises
            .Include(e => e.ExerciseMuscleGroups)
                .ThenInclude(emg => emg.MuscleGroup)
            .OrderBy(e => e.Name)
            .ToListAsync();

        if (Id.HasValue)
        {
            workout = await Db.Workouts
                .Include(w => w.Days)
                    .ThenInclude(d => d.Exercises)
                        .ThenInclude(e => e.Exercise)
                            .ThenInclude(ex => ex.ExerciseMuscleGroups)
                                .ThenInclude(emg => emg.MuscleGroup)
                .FirstOrDefaultAsync(w => w.Id == Id.Value) ?? new Workout();
        }
        else
        {
            workout = new Workout();
            workout.Days.Add(new WorkoutDay { Label = "Day 1", DayOfWeek = DayOfWeek.Monday, OrderNumber = 1 });
            workout.Days.Add(new WorkoutDay { Label = "Day 2", DayOfWeek = DayOfWeek.Tuesday, OrderNumber = 2 });
            workout.Days.Add(new WorkoutDay { Label = "Day 3", DayOfWeek = DayOfWeek.Wednesday, OrderNumber = 3 });
        }
    }

    private void AddDay()
    {
        var nextOrder = workout.Days.Any() ? workout.Days.Max(d => d.OrderNumber) + 1 : 1;
        var dayCountInWeek = workout.Days.Count(d => d.WeekNumber == currentWeek) + 1;
        var day = new WorkoutDay
        {
            Label = $"Day {dayCountInWeek}",
            DayOfWeek = DayOfWeek.Monday,
            WeekNumber = currentWeek,
            OrderNumber = nextOrder
        };
        workout.Days.Add(day);
        StateHasChanged();
    }

    private void RemoveDay(WorkoutDay day)
    {
        workout.Days.Remove(day);
        ReorderDays();
        StateHasChanged();
    }

    private void OnExerciseSelected(WorkoutDay day, object value, WorkoutDayExercise? editingEx = null)
    {
        if (int.TryParse(value?.ToString(), out var exId) && exId > 0)
        {
            if (editingEx != null)
            {
                var exercise = allExercises.FirstOrDefault(e => e.Id == exId);
                if (exercise == null) return;
                editingEx.ExerciseId = exId;
                editingEx.Exercise = exercise;
            }
            else
            {
                selectedExerciseId[day.Label] = exId;
                AddExerciseToDay(day);
                selectedExerciseId[day.Label] = 0;
            }
            StateHasChanged();
        }
    }

    private void AddExerciseToDay(WorkoutDay day)
    {
        if (!selectedExerciseId.TryGetValue(day.Label, out var exId) || exId == 0) return;
        if (day.Exercises.Any(e => e.ExerciseId == exId)) return;
        var exercise = allExercises.FirstOrDefault(e => e.Id == exId);
        if (exercise == null) return;
        var ex = new WorkoutDayExercise
        {
            ExerciseId = exId,
            Exercise = exercise,
            OrderInDay = day.Exercises.Count + 1
        };
        day.Exercises.Add(ex);

        selectedMuscleGroup[day.Label] = null;
        selectedExerciseId[day.Label] = 0;
        StateHasChanged();
    }

    private void OnMuscleGroupChanged(string day, object value)
    {
        if (Enum.TryParse<MuscleGroups>(value?.ToString(), out var muscleGroup))
            selectedMuscleGroup[day] = muscleGroup;
        else
            selectedMuscleGroup[day] = null;
        selectedExerciseId[day] = 0;
    }

    private void RemoveSelectedMuscleGroup(string label)
    {
        if (selectedMuscleGroup.ContainsKey(label))
        {
            selectedMuscleGroup.Remove(label);
            StateHasChanged();
        }
    }

    private void StartEditingExercise(string label, int exerciseId)
    {
        editingExercises.Add((label, exerciseId));
    }

    private void StopEditingExercise(string label, int exerciseId)
    {
        editingExercises.Remove((label, exerciseId));
    }

    private IEnumerable<Exercise> GetExercisesForDay(string label)
    {
        if (selectedMuscleGroup.TryGetValue(label, out var muscleGroup) && muscleGroup != null)
        {
            return allExercises.Where(ex => ex.ExerciseMuscleGroups.Any(emg => emg.MuscleGroup.Name == muscleGroup.ToString()));
        }
        return Enumerable.Empty<Exercise>();
    }

    private void RemoveExerciseFromDay(WorkoutDay day, WorkoutDayExercise ex)
    {
        day.Exercises.Remove(ex);
        StateHasChanged();
    }

    private void OnLabelChanged(WorkoutDay day, object? value)
    {
        if (value is null) return;
        day.Label = value.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void OnDayOfWeekChanged(WorkoutDay day, object? value)
    {
        if (value is null) return;
        if (!Enum.TryParse<DayOfWeek>(value.ToString(), out var newDayOfWeek)) return;
        day.DayOfWeek = newDayOfWeek;
        StateHasChanged();
    }

    private void ChangeWeek(int delta)
    {
        currentWeek += delta;
        if (currentWeek < 1)
            currentWeek = 1;
        if (currentWeek > MaxWeek)
            currentWeek = MaxWeek;
    }

    private void ReorderDays()
    {
        int order = 1;
        foreach (var day in workout.Days.OrderBy(d => d.OrderNumber))
        {
            day.OrderNumber = order++;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
            Db.Workouts.Update(workout);
        else
            Db.Workouts.Add(workout);

        await Db.SaveChangesAsync();

        if (saveAsTemplate)
        {
            var template = new WorkoutTemplate
            {
                Name = workout.Name,
                CreatedOn = DateTime.UtcNow
            };

            foreach (var workoutDay in workout.Days.OrderBy(d => d.OrderNumber))
            {
                var templateDay = new WorkoutTemplateDay
                {
                    DayOfWeek = workoutDay.DayOfWeek,
                    Label = workoutDay.Label,
                    OrderNumber = workoutDay.OrderNumber,
                };

                foreach (var workoutExercise in workoutDay.Exercises.OrderBy(e => e.OrderInDay))
                {
                    var templateExercise = new WorkoutTemplateDayExercise
                    {
                        ExerciseId = workoutExercise.ExerciseId,
                        OrderInDay = workoutExercise.OrderInDay
                    };
                    templateDay.Exercises.Add(templateExercise);
                }

                template.Days.Add(templateDay);
            }

            Db.WorkoutTemplates.Add(template);
            await Db.SaveChangesAsync();

            workout.WorkoutTemplateId = template.Id;
            Db.Workouts.Update(workout);
            await Db.SaveChangesAsync();
        }

        if (!Id.HasValue)
            await CreateUpcomingWeekAsync(workout);

        Navigation.NavigateTo("/workouts");
    }

    private async Task CreateUpcomingWeekAsync(Workout workout)
    {
        WorkoutTemplate? template = null;
        if (workout.WorkoutTemplateId.HasValue)
        {
            template = await Db.WorkoutTemplates
                .Include(t => t.Days)
                    .ThenInclude(d => d.Exercises)
                .FirstOrDefaultAsync(t => t.Id == workout.WorkoutTemplateId.Value);
        }

        for (int i = 0; i < 7; i++)
        {
            var templateDay = template?.Days.FirstOrDefault(d => d.OrderNumber == i + 1);
            var dow = templateDay?.DayOfWeek ?? (DayOfWeek)i;
            var workoutDay = new WorkoutDay
            {
                WorkoutId = workout.Id,
                DayOfWeek = dow,
                Label = templateDay?.Label ?? dow.ToString(),
                WeekNumber = 1,
                OrderNumber = i + 1,
                Name = templateDay?.Label ?? dow.ToString()
            };
            Db.WorkoutDays.Add(workoutDay);
            await Db.SaveChangesAsync();

            if (templateDay != null)
            {
                foreach (var templateExercise in templateDay.Exercises.OrderBy(e => e.OrderInDay))
                {
                    var workoutExercise = new WorkoutDayExercise
                    {
                        WorkoutDayId = workoutDay.Id,
                        ExerciseId = templateExercise.ExerciseId,
                        OrderInDay = templateExercise.OrderInDay
                    };
                    Db.WorkoutDayExercises.Add(workoutExercise);
                }

                await Db.SaveChangesAsync();
            }
        }
    }

    private async Task DeleteWorkout()
    {
        if (!Id.HasValue) return;

        var workoutToDelete = await Db.Workouts.FindAsync(Id.Value);
        if (workoutToDelete != null)
        {
            Db.Workouts.Remove(workoutToDelete);
            await Db.SaveChangesAsync();
        }

        Navigation.NavigateTo("/workouts");
    }
}
