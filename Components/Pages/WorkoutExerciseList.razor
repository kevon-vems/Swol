@using Swol.Data.Models.Work
@using Swol.Data.Models.Config
@using Swol.Enums

<div class="p-2 flex-1">
    <div class="mb-2 space-y-1">
        @foreach (var ex in Day.Exercises)
        {
            <div class="mb-2 rounded border border-gray-200">
                <div class="flex items-center justify-between bg-blue-600 p-1 rounded-t pl-2">
                    <span class="text-white text-sm font-semibold">
                        @string.Join(", ", ex.Exercise?.ExerciseMuscleGroups.Select(emg => emg.MuscleGroup.Name) ?? new List<string>())
                    </span>
                    <button type="button" class="p-1 text-white hover:text-red-200 transition" @onclick="() => RemoveExercise?.Invoke(Day, ex)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
                <div class="px-3 py-2 text-gray-900 text-base">
                    @if (EditingExercises.Contains((Day.Label, ex.Exercise?.Id ?? 0)))
                    {
                        <select class="block w-full text-sm border border-gray-300 rounded px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                @onchange="async e => await HandleExerciseChange(e, ex)"
                                @onblur="async () => StopEditingExercise?.Invoke(Day.Label, ex.Exercise?.Id ?? 0)">
                            <option value="0">-- Select Exercise --</option>
                            @foreach (var exercise in GetExercisesForDay(Day.Label))
                            {
                                <option value="@exercise.Id" selected="@(exercise.Id == (ex.Exercise?.Id ?? 0))">
                                    @exercise.Name (@string.Join(", ", exercise.ExerciseMuscleGroups.Select(emg => emg.MuscleGroup.Name)))
                                </option>
                            }
                        </select>
                    }
                    else
                    {
                        <span class="cursor-pointer hover:underline" @onclick="() => StartEditingExercise?.Invoke(Day.Label, ex.Exercise?.Id ?? 0)">
                            @ex.Exercise?.Name
                        </span>
                    }
                </div>
            </div>
        }

        @if (!Day.Exercises.Any() && (!SelectedMuscleGroup.TryGetValue(Day.Label, out var group) || group == null))
        {
            <div class="text-gray-700">No exercises</div>
        }

        @if (!Day.Exercises.Any(ex => EditingExercises.Contains((Day.Label, ex.Exercise?.Id ?? 0))) && SelectedMuscleGroup.TryGetValue(Day.Label, out var selectedGroup) && selectedGroup != null)
        {
            <div class="mb-2 rounded border border-gray-200">
                <div class="flex items-center justify-between bg-blue-600 p-1 rounded-t pl-2">
                    <span class="text-white text-sm font-semibold">
                        @selectedGroup
                    </span>
                    <button type="button" class="p-1 text-white hover:text-red-200 transition" title="Remove Muscle Group" @onclick="() => RemoveSelectedMuscleGroup?.Invoke(Day.Label)">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </div>
                <div class="px-3 py-2 text-gray-900 text-base">
                    <select class="block w-full text-sm border border-gray-300 rounded px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            @onchange="e => ExerciseSelected?.Invoke(Day, e.Value ?? string.Empty, null)">
                        <option value="0">-- Select Exercise --</option>
                        @foreach (var ex in GetExercisesForDay(Day.Label))
                        {
                            <option value="@ex.Id">@ex.Name (@string.Join(", ", ex.ExerciseMuscleGroups.Select(emg => emg.MuscleGroup.Name)))</option>
                        }
                    </select>
                </div>
            </div>
        }

        @if (!Day.Exercises.Any(ex => EditingExercises.Contains((Day.Label, ex.Exercise?.Id ?? 0))) && (!SelectedMuscleGroup.TryGetValue(Day.Label, out var selectedGroup2) || selectedGroup2 == null))
        {
            <select class="block w-full text-sm border border-gray-300 rounded px-2 py-1 mb-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    @onchange="e => MuscleGroupChanged?.Invoke(Day.Label, e?.Value ?? string.Empty)">
                <option value="">-- Select Muscle Group --</option>
                @foreach (var group in Enum.GetValues<MuscleGroups>())
                {
                    <option value="@group">@group</option>
                }
            </select>
        }
        else if (!Day.Exercises.Any(ex => EditingExercises.Contains((Day.Label, ex.Exercise?.Id ?? 0))) && SelectedMuscleGroup.TryGetValue(Day.Label, out var muscleGroup) && muscleGroup != null && !GetExercisesForDay(Day.Label).Any())
        {
            <div class="text-gray-400 mb-2">No exercises for this muscle group.</div>
        }
    </div>
</div>

@code {
    [Parameter] public WorkoutDay Day { get; set; } = default!;
    [Parameter] public HashSet<(string, int)> EditingExercises { get; set; } = new();
    [Parameter] public Action<WorkoutDay, WorkoutDayExercise>? RemoveExercise { get; set; }
    [Parameter] public Action<string, int>? StartEditingExercise { get; set; }
    [Parameter] public Action<string, int>? StopEditingExercise { get; set; }
    [Parameter] public Func<string, IEnumerable<Exercise>> GetExercisesForDay { get; set; } = default!;
    [Parameter] public Action<WorkoutDay, object, WorkoutDayExercise?>? ExerciseSelected { get; set; }
    [Parameter] public Dictionary<string, MuscleGroups?> SelectedMuscleGroup { get; set; } = new();
    [Parameter] public Action<string, object>? MuscleGroupChanged { get; set; }
    [Parameter] public Action<string>? RemoveSelectedMuscleGroup { get; set; }

    private Task HandleExerciseChange(ChangeEventArgs e, WorkoutDayExercise ex)
    {
        ExerciseSelected?.Invoke(Day, e.Value ?? string.Empty, ex);
        StopEditingExercise?.Invoke(Day.Label, ex.Exercise?.Id ?? 0);
        return Task.CompletedTask;
    }
}
