@page "/mesocycles"
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Nav
@using Swol.Data.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Mesocycles</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>Mesocycles</h1>
    <a href="/mesocycles/create" class="btn btn-primary">Create New Mesocycle</a>
</div>

@if (mesocycles == null)
{
    <p><em>Loading...</em></p>
}
else if (!mesocycles.Any())
{
    <div class="alert alert-info">
        <p>No mesocycles found. Create your first mesocycle to start tracking your progress.</p>
    </div>
}
else
{
    <div class="row">
        @foreach (var mesocycle in mesocycles)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 @(mesocycle.IsActive ? "border-primary" : "")">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="m-0">@mesocycle.Name</h5>
                        @if (mesocycle.IsActive)
                        {
                            <span class="badge bg-primary">Active</span>
                        }
                    </div>
                    <div class="card-body">
                        <p><strong>Workout:</strong> @mesocycle.Workout?.Name</p>
                        <p><strong>Period:</strong> @mesocycle.StartDate.ToShortDateString() - @mesocycle.EndDate.ToShortDateString()</p>
                        <p><strong>Week:</strong> @mesocycle.CurrentWeek of @mesocycle.NumberOfWeeks</p>
                        
                        <div class="progress mb-3" style="height: 20px;">
                            <div class="progress-bar @(mesocycle.IsDeloadWeek ? "bg-warning" : "bg-primary")" 
                                 role="progressbar" 
                                 style="width: @(100 * mesocycle.CurrentWeek / mesocycle.NumberOfWeeks)%;"
                                 aria-valuenow="@mesocycle.CurrentWeek" 
                                 aria-valuemin="1" 
                                 aria-valuemax="@mesocycle.NumberOfWeeks">
                                Week @mesocycle.CurrentWeek
                            </div>
                        </div>
                        
                        <p>@mesocycle.Description</p>
                        
                        @if (mesocycle.WorkoutLogs.Any())
                        {
                            <p><strong>Completed Workouts:</strong> @mesocycle.WorkoutLogs.Count(wl => wl.EndTime.HasValue)</p>
                        }
                    </div>
                    <div class="card-footer">
                        <a href="/mesocycles/edit/@mesocycle.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                        <a href="/mesocycles/delete/@mesocycle.Id" class="btn btn-sm btn-outline-danger">Delete</a>
                        @if (!mesocycle.IsActive)
                        {
                            <button type="button" class="btn btn-sm btn-outline-success" @onclick="() => SetActiveAsync(mesocycle.Id)">Set Active</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Mesocycle>? mesocycles;

    protected override async Task OnInitializedAsync()
    {
        mesocycles = await Db.Mesocycles
            .Include(m => m.Workout)
            .Include(m => m.WorkoutLogs)
            .OrderByDescending(m => m.IsActive)
            .ThenByDescending(m => m.StartDate)
            .ToListAsync();
    }
    
    private async Task SetActiveAsync(int mesocycleId)
    {
        if (mesocycles == null) return;
        
        // Deactivate all mesocycles
        foreach (var m in mesocycles.Where(m => m.IsActive))
        {
            m.IsActive = false;
        }
        
        // Activate the selected mesocycle
        var mesocycle = mesocycles.FirstOrDefault(m => m.Id == mesocycleId);
        if (mesocycle != null)
        {
            mesocycle.IsActive = true;
            await Db.SaveChangesAsync();
            
            // Refresh data
            await OnInitializedAsync();
        }
    }
}