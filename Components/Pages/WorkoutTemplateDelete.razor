@page "/templates/delete/{Id:int}"
@inject Swol.Data.ApplicationDbContext Db
@inject NavigationManager Nav
@using Swol.Data.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete Template</PageTitle>

<div class="max-w-4xl mx-auto p-4 space-y-6">

<h1 class="text-2xl font-bold mb-6">Delete Template</h1>

@if (template == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
        <h4 class="text-lg font-semibold mb-1">Are you sure you want to delete this template?</h4>
        <p>This action cannot be undone.</p>
    </div>

    <div class="bg-white border border-gray-200 rounded shadow mb-6">
        <div class="border-b border-gray-200 px-4 py-2 bg-gray-50 rounded-t">
            <h5 class="m-0 text-lg font-semibold">@template.Name</h5>
        </div>
        <div class="px-4 py-3">
            <p><strong>Start:</strong> @template.StartDate.ToShortDateString()</p>
            <p><strong>Weeks:</strong> @template.NumberOfWeeks</p>
            
            @if (workoutLogs.Any())
            {
                <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mt-4 rounded">
                    <strong>Warning:</strong> This template has @workoutLogs.Count associated workout logs.
                    Deleting this template will remove the association with these logs, but the logs themselves will not be deleted.
                </div>
            }
        </div>
    </div>

    <div class="flex items-center mt-6">
        <button @onclick="DeleteTemplate" class="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded shadow">Delete</button>
        <a href="/templates" class="ml-3 bg-gray-200 hover:bg-gray-300 text-black font-semibold py-2 px-4 rounded shadow">Cancel</a>
    </div>
}

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private WorkoutTemplate? template;
    private List<WorkoutLog> workoutLogs = new();

    protected override async Task OnInitializedAsync()
    {
        template = await Db.WorkoutTemplates
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (template == null)
        {
            Nav.NavigateTo("/templates");
            return;
        }
        
        workoutLogs = await Db.WorkoutLogs
            .Where(wl => wl.WorkoutTemplateId == Id)
            .ToListAsync();
    }

    private async Task DeleteTemplate()
    {
        // Remove template associations from workout logs
        foreach (var log in workoutLogs)
        {
            log.WorkoutTemplateId = null;
            log.WorkoutTemplateWeek = null;
        }

        Db.WorkoutTemplates.Remove(template!);
        await Db.SaveChangesAsync();
        Nav.NavigateTo("/templates");
    }
}
